import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from statsmodels.tsa.stattools import adfuller
from statsmodels.tsa.seasonal import seasonal_decompose
from statsmodels.graphics.tsaplots import plot_acf, plot_pacf
import pmdarima as pm  # Pour Auto-ARIMA
from pathlib import Path

sns.set_style("whitegrid")  # Am√©lioration visuelle des graphiques

def read_energy_data(file_path):
    """Lit et pr√©pare le fichier CSV."""
    try:
        df = pd.read_csv(file_path, sep=";", encoding="utf-8", low_memory=False)
        df.columns = df.columns.str.strip()  # Nettoyage des noms de colonnes

        if "datetime" not in df.columns:
            print("\n‚ùå Erreur : La colonne 'datetime' n'a pas √©t√© trouv√©e.")
            return None

        df["datetime"] = pd.to_datetime(df["datetime"], errors="coerce")
        df.set_index("datetime", inplace=True)

        # V√©rification des valeurs NaN
        if df.isna().sum().sum() > 0:
            print("\n‚ö†Ô∏è Avertissement : Donn√©es manquantes d√©tect√©es, application d'un forward fill.")
            df.fillna(method="ffill", inplace=True)

        print("\n‚úÖ Donn√©es charg√©es avec succ√®s !")
        print(df.info())
        return df

    except Exception as e:
        print(f"\n‚ùå Erreur inattendue : {e}")
        return None

def test_stationarity(series):
    """Effectue le test de stationnarit√© ADF."""
    result = adfuller(series.dropna())
    print("\nüìä Test de stationnarit√© ADF")
    print(f"Statistique ADF : {result[0]:.4f}")
    print(f"p-value : {result[1]:.4f}")
    print("Seuils critiques :", result[4])

    if result[1] <= 0.05:
        print("‚úÖ La s√©rie est stationnaire.")
        return True
    else:
        print("‚ùå La s√©rie n'est pas stationnaire. Une diff√©renciation peut √™tre n√©cessaire.")
        return False

def apply_differencing(series):
    """Applique la diff√©renciation si n√©cessaire et reteste la stationnarit√©."""
    series_diff = series.diff().dropna()
    if test_stationarity(series_diff):
        return series_diff, 1  # d = 1
    else:
        print("üîÅ Nouvelle diff√©renciation appliqu√©e.")
        return series_diff.diff().dropna(), 2  # d = 2

def seasonal_analysis(series, period):
    """Effectue une d√©composition saisonni√®re."""
    print("\nüîç D√©composition saisonni√®re")
    decomposition = seasonal_decompose(series, model="additive", period=period)
    
    plt.figure(figsize=(12, 8))
    plt.subplot(411)
    plt.plot(series, label="S√©rie originale", color="blue")
    plt.legend()

    plt.subplot(412)
    plt.plot(decomposition.trend, label="Tendance", color="orange")
    plt.legend()

    plt.subplot(413)
    plt.plot(decomposition.seasonal, label="Saisonnalit√©", color="green")
    plt.legend()

    plt.subplot(414)
    plt.plot(decomposition.resid, label="R√©sidu", color="red")
    plt.legend()

    plt.tight_layout()
    plt.show()

def plot_acf_pacf(series):
    """Affiche les graphiques ACF et PACF pour l'identification des param√®tres (p, q)."""
    print("\nüìä Analyse des autocorr√©lations")
    fig, axes = plt.subplots(1, 2, figsize=(12, 5))

    plot_acf(series.dropna(), ax=axes[0], lags=40)
    axes[0].set_title("Autocorrelation Function (ACF)")

    plot_pacf(series.dropna(), ax=axes[1], lags=40)
    axes[1].set_title("Partial Autocorrelation Function (PACF)")

    plt.show()

def auto_arima_selection(series):
    """Automatise la s√©lection des hyperparam√®tres avec Auto-ARIMA."""
    print("\nüöÄ S√©lection automatique des hyperparam√®tres avec Auto-ARIMA")
    model = pm.auto_arima(series, seasonal=True, m=24, stepwise=True, trace=True)
    print("\n‚úÖ Mod√®le optimal trouv√© :", model)
    return model

# üìÇ Chargement des donn√©es
#PROJECT_ROOT = Path(__file__).parent.parent
#DATA_DIR = PROJECT_ROOT / "data"
#data_path = str(DATA_DIR)

file_path = "/Users/macos/Desktop/ProjetDataScience/data/energy_data2023.csv"
df = read_energy_data(file_path)

if df is not None:
    target_column = "Consommation"  # ‚ö†Ô∏è Change selon tes donn√©es
    if target_column in df.columns:
        series = df[target_column]

        # üìä 1. Test de stationnarit√© et diff√©renciation
        is_stationary = test_stationarity(series)
        if not is_stationary:
            series, d_value = apply_differencing(series)
        else:
            d_value = 0  # Pas de diff√©renciation n√©cessaire

        # üîç 2. D√©tection de la saisonnalit√©
        seasonal_analysis(series, period=24)  # ‚ö†Ô∏è Modifier selon les donn√©es

        # üìä 3. ACF et PACF
        plot_acf_pacf(series)

        # üöÄ 4. S√©lection des hyperparam√®tres avec Auto-ARIMA
        best_model = auto_arima_selection(series)

    else:
        print(f"\n‚ùå La colonne '{target_column}' n'existe pas dans les donn√©es.")
